version: "3.5"

services:
#  mariadb:
#    image: mariadb:10.5.5
#    container_name: mariadb
#    restart: always
#    environment:
#      MYSQL_USER: "root"
#      MYSQL_ROOT_PASSWORD: "123"
#      TZ: "Asia/Shanghai"
#    ports:
#      - "3306:3306"
#    volumes:
#      - "${PWD}/mariadb/data:/var/lib/mysql"
#      - "${PWD}/mariadb/log:/var/log/mysql"
#      - "${PWD}/mariadb/conf:/etc/mysql"

#  mongo:
#    image: mongo:latest
#    restart: always
#    container_name: mongo
#    ports:
#      - "27017:27017"
#    volumes:
#      - "$PWD/mongo/mongo_data:/data/db"

  redis:
    image: redis:latest
    restart: always
    container_name: redis
    ports:
      - "6379:6379"

  consul:
    image: consul:1.13.3
    container_name: consul
    restart: always
    environment:
      TZ: "Asia/Shanghai"
    ports:
      - "8500:8500"
    volumes:
      - "$PWD/consul/conf:/consul/conf"
      - "$PWD/consul/data:/consul/data"
    entrypoint: consul agent -server -bootstrap-expect=1 -ui -bind=0.0.0.0 -client=0.0.0.0 -data-dir=/consul/data
    networks:
      - app_net

#  etcd:
#    image: docker.io/bitnami/etcd:3.5
#    container_name: etcd
#    restart: always
#    environment:
#      - ALLOW_NONE_AUTHENTICATION=yes
#      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
#    ports:
#      - "23790:2379"
#      - "23800:2380"
#    volumes:
#      - "$PWD/data/etcd:/bitnami/etcd"
#    networks:
#      - app_net

  

  # jenkins:
  #   image: jenkins/jenkins:latest
  #   restart: always
  #   container_name: jenkins
  #   ports:
  #     - "8080:8080"
  #     - "5000:5000"
  #   volumes:
  #     - "$PWD/jenkins/data:/var/jenkins_home"
  #     - "$PWD/jenkins/run:/var/run"
  #     - "/bin/docker:/bin/docker"
  #   user: root
#  zookeeper:
#    image: wurstmeister/zookeeper:latest
#    restart: always
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    networks:
#      - app_net

#  broker-1:
#    image: wurstmeister/kafka:latest
#    restart: always
#    container_name: broker-1
#    ports:
#      - "9092:9092"
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      # 注册到zookeeper互通kafka节点地址, 此处填本机地址
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.11:9092
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#      KAFKA_CFG_NUM_PARTITIONS: 3
#    networks:
#      - app_net

#  broker-2:
#     image: wurstmeister/kafka:latest
#     restart: always
#     container_name: broker-2
#     ports:
#       - "9093:9093"
#     depends_on:
#       - zookeeper
#     environment:
#       KAFKA_BROKER_ID: 2
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.11:9093
#       KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
#       KAFKA_CFG_NUM_PARTITIONS: 3
#     networks:
#       - app_net

#  broker-3:
#     image: wurstmeister/kafka:latest
#     restart: always
#     container_name: broker-3
#     ports:
#       - "9094:9094"
#     depends_on:
#       - zookeeper
#     environment:
#       KAFKA_BROKER_ID: 3
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.1.11:9094
#       KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
#       KAFKA_CFG_NUM_PARTITIONS: 3
#     networks:
#       - app_net

#  broker-manager:
#     image: sheepkiller/kafka-manager:latest
#     restart: always
#     container_name: broker-manager
#     ports:
#       - "9000:9000"
#     depends_on:
#       - zookeeper
#     environment:
#       ZK_HOSTS: zookeeper:2181
#       KAFKA_BROKERS: broker-1:9092,broker-2:9093,broker-3:9094
#     networks:
#       - app_net

#  elasticsearch:
#    image: elasticsearch:7.13.3
#    container_name: elasticsearch
#    privileged: true
#    environment:
#      - "cluster.name=elasticsearch"
#      - "discovery.type=single-node"
#      - "ES_JAVA_OPTS=-Xms512m -Xmx1096m"
#      - "bootstrap.memory_lock=true"
#    volumes:
#      - "$PWD/es/plugins:/usr/share/elasticsearch/plugins"
#      - "$PWD/es/data:/usr/share/elasticsearch/data:rw"
#      - "$PWD/es/logs:/user/share/elasticsearch/logs:rw"
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#  kibana:
#    image: kibana:7.13.3
#    container_name: kibana
#    depends_on:
#      - elasticsearch
#    environment:
#      ELASTICSEARCH_HOSTS: http://elasticsearch:9200 #设置访问elasticsearch的地址
#      I18N_LOCALE: zh-CN
#    ports:
#      - "5601:5601"

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    restart: always
#    ports:
#      - "9090:9090"
#    volumes:
#      - $PWD/prometheus/config:/etc/prometheus
#      - $PWD/prometheus/data/prometheus_db:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
#      - '--web.console.templates=/usr/share/prometheus/consoles'
#    networks:
#      - app_net

  # # 可视化面板
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - "$PWD/grafana/data:/var/lib/grafana"
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - app_net

  # # 采用被动推送方式获取数据并推送给prometheus
  # pushgateway:
  #   image: prom/pushgateway
  #   container_name: pushgateway
  #   restart: always
  #   ports:
  #     - "9091:9091"
  #   volumes:
  #     - $PWD/prometheus/data/pushgateway_data:/var/lib/pushgateway

  # # 告警系统
  # alertmanager:
  #   image: prom/alertmanager
  #   hostname: alertmanager
  #   container_name: alertmanager
  #   restart: always
  #   ports:
  #     - "9093:9093"
  #   volumes:
  #     - $PWD/prometheus/data/alertmanager_data:/var/lib/alertmanager

#  nginx:
#    container_name: nginx
#    image: nginx
#    restart: always
#    ports:
#      - 1080:80
#    volumes:
#      - "/etc/localtime:/etc/localtime:ro"
#      - "$PWD/nginx/conf/log:/var/log/nginx"
#      - "$PWD/nginx/conf/html:/usr/share/nginx/html"
#      - "$PWD/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:rw"
##      - "$PWD/nginx/conf/conf/workflow.conf:/etc/nginx/conf/workflow.conf:rw"
#      - "$PWD/nginx/conf/conf.d:/etc/nginx/conf.d"
#    networks:
#      - app_net

#  postgresql:
#    image: postgres:13.11-bullseye
#    container_name: postgresql
#    restart: always
#    environment:
#      POSTGRES_USER: root
#      POSTGRES_PASSWORD: root
#    ports:
#      - "5432:5432"
#    volumes:
#      - "$PWD/postgresql/data:/var/lib/postgresql/data"

#  minio:
#    image: minio/minio:latest
#    container_name: minio
#    restart: always
#    command: server --console-address ":9001" http://minio/data{1...2}
#    environment:
#      MINIO_ROOT_USER: "minioadmin"
#      MINIO_ROOT_PASSWORD: "minioadmin"
#    ports:
#      - "9000:9000"
#      - "9001:9001"
#    volumes:
#      - "/Users/ty/minio/data1:/data1"
#      - "/Users/ty/minio/data2:/data2"
#      - "/etc/localtime:/etc/localtime"
#    networks:
#      - app_net

#  jenkins:
#    image: jenkins/jenkins:latest
#    container_name: jenkins
#    restart: always
#    ports:
#      - "8080:8080"
#      - "50000:50000"
#    volumes:
#      - "$PWD/jenkins/jenkins_home:/var/jenkins_home"

  # 主从复制MySQL
  mariadb:
    image: mariadb:10.5.5
    container_name: mariadb-master
    restart: always
    environment:
      MYSQL_USER: "root"
      MYSQL_ROOT_PASSWORD: "123"
      TZ: "Asia/Shanghai"
    ports:
      - "3306:3306"
    volumes:
      - "${PWD}/mariadb/data:/var/lib/mysql"
      - "${PWD}/mariadb/log:/var/log/mysql"
      - "${PWD}/mariadb/conf:/etc/mysql"
    networks:
      - app_net

  mariadb-slave1:
    image: mariadb:10.5.5
    container_name: mariadb-slave1
    restart: always
    environment:
      MYSQL_USER: "root"
      MYSQL_ROOT_PASSWORD: "123"
      TZ: "Asia/Shanghai"
    ports:
      - "3307:3306"
    volumes:
      - "${PWD}/mariadb-slave1/data:/var/lib/mysql"
      - "${PWD}/mariadb-slave1/log:/var/log/mysql"
      - "${PWD}/mariadb-slave1/conf:/etc/mysql"
    networks:
      - app_net

networks:
  app_net:
    driver: bridge
